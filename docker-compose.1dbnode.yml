# Source: 
# Modified from: https://medium.com/geekculture/host-a-fully-persisted-apache-nifi-service-with-docker-ffaa6a5f54a3

version: '3.8'

services:
  flaskapi:
    build: 
      context: ./code/api
      dockerfile: Dockerfile
    command: gunicorn --config gunicorn_config.py app:app
    ports:
      - 8000:8080
    volumes:
      - ./code/api:/usr/src/app
      - /usr/src/app/venv # exclude venv directory from volume to reduce volume size
  
  nginx:
    container_name: nginx
    restart: always
    build: ./code/nginx
    ports:
      - "80:80"
    depends_on:
      - flaskapi

  # configuration manager for NiFi
  zookeeper:
    hostname: myzookeeper
    container_name: zookeeper_container_persistent
    image: 'bitnami/zookeeper:3.9.1'  # latest image as of 2024-14-02.
    platform: 'linux/arm64' # work on Mac M1
    restart: on-failure
    environment:
        - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
        - my_persistent_network

  # version control for nifi flows
  registry:
    hostname: myregistry
    container_name: registry_container_persistent
    image: 'apache/nifi-registry:1.25.0'  # latest image as of 2024-14-02.
    platform: 'linux/arm64' # work on Mac M1
    restart: on-failure
    ports:
        - "18080:18080"
    environment:
        - LOG_LEVEL=INFO
        - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
        - NIFI_REGISTRY_FLOW_PROVIDER=file
        - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
    volumes:
        - ./nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
        - ./nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
    networks:
        - my_persistent_network
  
  # data extraction, transformation and load service
  nifi:
    hostname: mynifi
    container_name: nifi_container_persistent
    image: 'apache/nifi:1.19.0'
    platform: 'linux/arm64' # work on Mac M1
    restart: on-failure
    ports:
        - '9443:9443'
    environment:
        - NIFI_WEB_HTTP_PORT=9443
    healthcheck:
        test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:9443/nifi/}"
        interval: "60s"
        timeout: "3s"
        start_period: "5s"
        retries: 5
    volumes:
        - ./code/api/data_processed:/opt/nifi/nifi-current/data_processed
        - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository     # nifi_registry related
        - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository     # nifi_registry related
        - ./nifi/jdbc:/opt/nifi/nifi-current/jdbc                                   # driver for postgres, and thus corkroach
        # - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository 
        # - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository 
        # - ./nifi/state:/opt/nifi/nifi-current/state
        # - ./nifi/logs:/opt/nifi/nifi-current/logs
        # uncomment the next line after copying the /conf directory from the container to your local directory to persist NiFi flows
        - ./nifi/conf:/opt/nifi/nifi-current/conf
    networks:
      - my_persistent_network
          
  # corkroachdb for data storage
  crdb:
    image: cockroachdb/cockroach:latest-v22.2
    container_name: crdb-1
    ports:
        - "26257:26257"
        - "8085:8085"
    command: start-single-node --insecure --http-addr 172.18.0.4:8085
    volumes:
        - "${PWD}/cockroach-data/crdb:/cockroach/cockroach-data"
        - ./code/cockroachdb/airbnb_db.sql:/cockroach/airbnb_db.sql
        - ./code/cockroachdb/setup_db.sh:/cockroach/setup_db.sh
    networks:
        my_persistent_network:
          ipv4_address: 172.18.0.4
networks:
  my_persistent_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.18.0.4/16 # Assign a static IP address to hardcode DB connection in Nifi and python
          gateway: 172.18.0.1
